version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: music_postgres
    environment:
      POSTGRES_DB: music_campaigns
      POSTGRES_USER: backend_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend_user -d music_campaigns"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - backend-network

  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: music_backend
    environment:
      DATABASE_URL: postgresql://backend_user:${DB_PASSWORD}@postgres:5432/music_campaigns
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-false}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - backend-network

  frontend:
    build:
      context: ../music-campaign-frontend
      dockerfile: ../music-campaign-backend/Dockerfile.frontend
    container_name: music_frontend
    environment:
      REACT_APP_API_URL: ${API_URL:-https://xsigned.ai/api}
      REACT_APP_ENV: production
      REACT_APP_DOMAIN: ${DOMAIN:-xsigned.ai}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend-network

  nginx:
    image: nginx:alpine
    container_name: music_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx-cloudflare.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: music_cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "info"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  backend-network:
    driver: bridge
